#pragma version 10
//#pragma mode logicsig

// This TEAL was generated by TEALScript v0.90.4
// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is V4ZLLCTPIQYINEXEGCOBA2FY2PRJASUC2CULJHC3CIIOWAD7GZJUL66JHA

b *route_logic

// logic(byte[64])void
*route_logic:
	// sig: byte[64]
	int 0
	args
	dup
	len
	int 64
	==
	assert

	// execute logic(byte[64])void
	callsub logic
	int 1
	return

// logic(sig: bytes64): void
logic:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if0_condition
	// contracts/AlgoCrustLsig.algo.ts:17
	// this.txn.lastValid > this.lastRound
	txn LastValid
	pushints TMPL_lastRound
	>
	bz *if0_end

	// *if0_consequent
	// contracts/AlgoCrustLsig.algo.ts:18
	// verifyPayTxn(this.txn, {
	//         amount: 0,
	//         closeRemainderTo: this.funder,
	//       })
	// verify pay
	txn TypeEnum
	int pay
	==
	assert

	// verify amount
	txn Amount
	int 0
	==
	assert

	// verify closeRemainderTo
	txn CloseRemainderTo
	pushbytes TMPL_funder
	==
	assert

	// contracts/AlgoCrustLsig.algo.ts:23
	// return;
	retsub

*if0_end:
	// *if1_condition
	// contracts/AlgoCrustLsig.algo.ts:27
	// this.txn.closeRemainderTo === this.funder
	txn CloseRemainderTo
	pushbytes TMPL_funder
	==
	bz *if1_end

	// *if1_consequent
	// contracts/AlgoCrustLsig.algo.ts:28
	// verifyPayTxn(this.txn, {
	//         amount: 0,
	//       })
	// verify pay
	txn TypeEnum
	int pay
	==
	assert

	// verify amount
	txn Amount
	int 0
	==
	assert

	// contracts/AlgoCrustLsig.algo.ts:32
	// ed25519Verify(this.txn.txID, sig, this.signer)
	txn TxID
	frame_dig -1 // sig: bytes64
	pushbytes TMPL_signer
	ed25519verify

	// contracts/AlgoCrustLsig.algo.ts:34
	// return;
	retsub

*if1_end:
	// contracts/AlgoCrustLsig.algo.ts:37
	// verifyTxn(this.txn, {
	//       rekeyTo: globals.zeroAddress,
	//       closeRemainderTo: globals.zeroAddress,
	//       lastValid: this.lastRound,
	//     })
	// verify rekeyTo
	txn RekeyTo
	global ZeroAddress
	==
	assert

	// verify closeRemainderTo
	txn CloseRemainderTo
	global ZeroAddress
	==
	assert

	// verify lastValid
	txn LastValid
	pushints TMPL_lastRound
	==
	assert

	// contracts/AlgoCrustLsig.algo.ts:43
	// assert(this.txnGroup.length === 2)
	global GroupSize
	int 2
	==
	assert

	// contracts/AlgoCrustLsig.algo.ts:45
	// cid = extract3(this.txnGroup[1].applicationArgs[2], 2, 0)
	int 1
	gtxns ApplicationArgs 2
	extract 2 0
	frame_bury 0 // cid: byte[]

	// contracts/AlgoCrustLsig.algo.ts:47
	// ed25519Verify(cid, sig, this.signer)
	frame_dig 0 // cid: byte[]
	frame_dig -1 // sig: bytes64
	pushbytes TMPL_signer
	ed25519verify

	// contracts/AlgoCrustLsig.algo.ts:57
	// verifyAppCallTxn(this.txnGroup[1], {
	//       applicationID: this.crustAppId,
	//       applicationArgs: {
	//         0: method('place_order(pay,account,string,uint64,bool)void'),
	//       },
	//       lease: sha256(cid),
	//     })
	// verify appl
	int 1
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationID
	int 1
	gtxns ApplicationID
	pushints TMPL_crustAppId
	==
	assert

	// verify applicationArgs
	// verify applicationArgs 0
	int 1
	gtxns ApplicationArgs 0
	method "place_order(pay,account,string,uint64,bool)void"
	==
	assert

	// verify lease
	int 1
	gtxns Lease
	frame_dig 0 // cid: byte[]
	sha256
	==
	assert
	retsub